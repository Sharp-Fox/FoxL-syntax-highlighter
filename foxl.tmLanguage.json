{
    "$schema": "https://json.schemastore.org/tmLanguage",
    "name": "Foxl",
    "scopeName": "source.foxl",

    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#identifiers"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#symbols"
        },
        {
            "include": "#string-literals"
        },
        {
            "include": "#unknown"
        }
    ],

    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash",
                    "match": "//.*$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control",
                    "match": "\\b(if|else|while|for|return|include)\\b"
                },
                {
                    "name": "keyword",
                    "match": "\\b(let|const|func)\\b"
                },
                {
                    "name": "support.function",
                    "match": "\\b(write|read)\\b"
                }
            ]
        },
        "functions": {
            "name": "entity.name.function",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\("
        },
        "identifiers": {
            "name": "variable",
            "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        "numbers": {
            "name": "constant.numeric",
            "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        "operators": {
            "name": "keyword.operator",
            "match": "[\\+\\-\\*/=!><]+"
        },
        "symbols": {
            "name": "punctuation",
            "match": "[\\(\\)\\{\\},\\[\\];]+"
        },
        "string-literals": {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\(n|t|\\\"|\\\\|\\')"
                },
                {
                    "name": "invalid.illegal",
                    "match": "\\\\."
                }
            ]
        },
        "unknown": {
            "name": "invalid.illegal",
            "match": "."
        }
    }
}
